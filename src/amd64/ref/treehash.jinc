inline 
fn __treehash_fors<INLEN>(
  reg ptr u8[INLEN] root,
  reg u64 offset,
  reg u64 auth_path,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 leaf_idx,
  reg u32 idx_offset,
  reg ptr u32[8] tree_addr,
  reg ptr u32[8] info
) -> reg ptr u8[INLEN], // root
     reg ptr u32[8], // tree_addr
     reg ptr u32[8] // info
{
  stack u32 s_leaf_idx;
  stack u32 s_idx_offset;

  //
  stack u8[SPX_FORS_HEIGHT * SPX_N] nodes; // in C implementation: "stack"
  reg ptr u8[SPX_FORS_HEIGHT * SPX_N] nodes_p;

  stack u8[2 * SPX_N] current;
  reg ptr u8[2 * SPX_N] current_p;
  reg ptr u8[SPX_N] current_0 current_1;

  reg u32 idx r_max_idx;
  stack u32 s_idx s_internal_idx_offset s_internal_idx s_internal_leaf s_h;
  stack u64 s_h_spx_n;

  inline u32 max_idx; // (1 << SPX_FORS_HEIGHT) - 1;
  stack u8 s_exit_outer_loop s_exit_inner_loop;

  reg u32 temp;
  reg u64 out_offset in_offset bytes;
  reg bool cond;

  reg u32 zero;

  inline int i;
  reg u64 index;

  //

  () = #spill(root, offset, auth_path, pub_seed, sk_seed, tree_addr, info);
  s_leaf_idx = leaf_idx;
  s_idx_offset = idx_offset;
  //

  max_idx = (1 << SPX_FORS_HEIGHT) - 1;

  // for (idx = 0;; idx++)
  s_idx = 0;
  s_exit_outer_loop = 0;
  while(s_exit_outer_loop == 0)
  {

    // gen_leaf( &current[SPX_N], ctx, idx + idx_offset, info);

      current_1 = current[SPX_N:SPX_N];
      temp = s_idx; temp += s_idx_offset; // temp =  idx + idx_offset
      () = #unspill(pub_seed, sk_seed, info);

    current[SPX_N:SPX_N], info = __fors_gen_leafx1_(current_1,
                                                       pub_seed,
                                                       sk_seed,
                                                       temp,
                                                       info);

    () = #spill(info);

    // uint32_t internal_idx_offset = idx_offset;
    // uint32_t internal_idx = idx;
    // uint32_t internal_leaf = leaf_idx;

    temp = s_idx_offset; s_internal_idx_offset = temp;
    temp = s_idx; s_internal_idx = temp;
    temp = s_leaf_idx; s_internal_leaf = temp;

    // for (h=0;; h++, internal_idx >>= 1, internal_leaf >>= 1)
    s_h = 0;
    s_h_spx_n = 0;
    s_exit_inner_loop = 0;
    while(s_exit_inner_loop == 0)
    {
      // if (h == tree_height) { memcpy( root, &current[SPX_N], SPX_N ); return; }
      if(s_h == SPX_FORS_HEIGHT)
      {
          () = #unspill(root, offset);
          out_offset = 0;
          current_1 = current[SPX_N:SPX_N];

        // root, _, _ = __memcpy_u8u8_2<INLEN, SPX_N>(root, out_offset, current_1, offset, SPX_N);
        // FIXME: Use __memcpy_u8u8_2
        for i=0 to SPX_N { root[offset + i] = current_1[i];  }
        
        // this fails with stack allocation: no region associated to variable dst
        // root[0:SPX_N] = #copy(current[SPX_N : SPX_N]);

          () = #spill(root);
          s_exit_inner_loop = 1;
          s_exit_outer_loop = 1;
      }
      else
      {
        // if ((internal_idx ^ internal_leaf) == 0x01)
        // { memcpy( &auth_path[ h * SPX_N ], &current[SPX_N], SPX_N ); }
        temp = s_internal_idx;
        temp ^= s_internal_leaf;
        if( temp == 1 )
        {
            () = #unspill(auth_path);
            out_offset = s_h_spx_n;
            current_1 = current[SPX_N : SPX_N];

          std::_x_memcpy_u8pu8<SPX_N>(auth_path, out_offset, current_1);

        }

        // if ((internal_idx & 1) == 0 && idx < max_idx) { break; }

          temp = s_internal_idx; temp &= 1;
          zero = 0;
          idx = s_idx;
          r_max_idx = max_idx; // add inline int to conditions library to avoid this

        cond = std::cond::cond_u32_a_eq_b_and_c_below_d(temp, zero, idx, r_max_idx);

        if(cond)
        {
          s_exit_inner_loop = 1;
        }
        else
        {
          // internal_idx_offset >>= 1;
          // set_tree_height(tree_addr, h + 1);
          // set_tree_index(tree_addr, internal_idx/2 + internal_idx_offset );

          s_internal_idx_offset >>= 1;

          () = #unspill(tree_addr);
          temp = s_h; temp += 1;
          tree_addr = __set_tree_height(tree_addr, temp);

          temp = s_internal_idx; temp >>= 1; temp += s_internal_idx_offset;
          tree_addr = __set_tree_index(tree_addr, temp);
          () = #spill(tree_addr);

          // unsigned char *left = &stack[h * SPX_N];
          // memcpy( &current[0], left, SPX_N );
              current_0 = current[0:SPX_N];
              out_offset = 0;
              nodes_p = nodes;
              in_offset = s_h_spx_n;
              bytes = SPX_N;

          current[0:SPX_N]=
            std::_x_memcpy_u8u8_2<SPX_N,SPX_FORS_HEIGHT*SPX_N>(current_0,
                                                          out_offset,
                                                          nodes_p,
                                                          in_offset,
                                                          bytes);

          // thash( &current[1 * SPX_N], &current[0 * SPX_N], 2, ctx, tree_addr);

            current_1 = current[SPX_N:SPX_N];
            current_p = current;
            () = #unspill(pub_seed, tree_addr);

          current[SPX_N:SPX_N] = __thash<2>(current_1, current_p, pub_seed, tree_addr);
        }
      }

      if( s_exit_inner_loop == 0 )
      {
        s_h += 1;
        s_h_spx_n += SPX_N;
        s_internal_idx >>= 1;
        s_internal_leaf >>= 1;
      }

    } // end: C: for (h=0;; h++, internal_idx >>= 1, internal_leaf >>= 1)
      //      Jasmin: while(s_exit_inner_loop == 0)

    // memcpy( &stack[h * SPX_N], &current[SPX_N], SPX_N);
    if( s_exit_outer_loop == 0 )
    {
      // no need to memcpy if s_exit_outer_loop == 1
        nodes_p = nodes;
        out_offset = s_h_spx_n;
        current_1 = current[SPX_N:SPX_N];

      nodes = std::_x_memcpy_u8u8<SPX_FORS_HEIGHT*SPX_N,SPX_N>(nodes_p, out_offset, current_1);
      s_idx += 1;
    }
  } // end: C: for (idx = 0;; idx++) // Jasmin: while(s_exit_outer_loop == 0)


  () = #unspill(root, tree_addr, info);

  return root, tree_addr, info;
}//<>

fn _treehash_fors<INLEN>(
  reg ptr u8[INLEN] root,
  reg u64 offset,
  reg u64 auth_path,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 leaf_idx,
  reg u32 idx_offset,
  reg ptr u32[8] tree_addr,
  reg ptr u32[8] info
) -> reg ptr u8[INLEN], reg ptr u32[8], reg ptr u32[8]
{
  root, tree_addr, info = __treehash_fors<INLEN>(root,
                                                 offset,
                                                 auth_path,
                                                 pub_seed,
                                                 sk_seed,
                                                 leaf_idx,
                                                 idx_offset,
                                                 tree_addr,
                                                 info);
  return root, tree_addr, info;
}//<>

// Same as compute root. root is actually a u8[SPX_N]
inline fn __treehash_fors_<INLEN>(
  reg ptr u8[INLEN] root, 
  reg u64 offset,
  reg u64 auth_path,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 leaf_idx,
  reg u32 idx_offset,
  reg ptr u32[8] tree_addr,
  reg ptr u32[8] info
) -> reg ptr u8[INLEN], reg ptr u32[8], reg ptr u32[8]
{
  root = root; offset = offset; auth_path = auth_path; pub_seed = pub_seed; sk_seed = sk_seed;
  leaf_idx = leaf_idx; idx_offset = idx_offset; tree_addr = tree_addr;
  info = info;

  root, tree_addr, info = _treehash_fors<INLEN>(root,
                                                offset,
                                                auth_path,
                                                pub_seed,
                                                sk_seed,
                                                leaf_idx,
                                                idx_offset,
                                                tree_addr,
                                                info);

  root = root;
  tree_addr = tree_addr;
  info = info;

  return root, tree_addr, info;
}//<>

inline 
fn __treehash_wots(
  reg ptr u8[SPX_N] root,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg u32 leaf_idx,
  reg ptr u32[8] tree_addr,
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES] sig, // struct info
  reg u32 wots_sign_leaf, // struct info
  reg ptr u32[SPX_WOTS_LEN] wots_steps, // struct info
  reg ptr u32[8] leaf_addr,
  reg ptr u32[8] pk_addr // struct info
) -> reg ptr u8[SPX_N],
     reg ptr u32[8],
     reg ptr u8[SPX_TREE_HEIGHT * SPX_N + SPX_WOTS_BYTES],
     reg ptr u32[8],
     reg ptr u32[8]
{
  stack u32 s_leaf_idx;
  stack u32 s_idx_offset;

  stack   u8[SPX_TREE_HEIGHT * SPX_N] nodes;
  reg ptr u8[SPX_TREE_HEIGHT * SPX_N] nodes_p;

  stack u8[2 * SPX_N] current;
  reg ptr u8[2 * SPX_N] current_p;
  reg ptr u8[SPX_N] current_0 current_1;

  reg u32 idx r_max_idx;
  stack u32 s_idx s_internal_idx s_internal_leaf s_h;
  stack u64 s_h_spx_n;

  inline u32 max_idx; // (1 << SPX_TREE_HEIGHT) - 1;

  stack u32 s_exit_outer_loop s_exit_inner_loop;

  reg u32 temp;
  reg u64 out_offset in_offset bytes;
  reg bool cond;

  reg u32 zero;

  s_idx_offset = 0;
  max_idx = (1 << SPX_TREE_HEIGHT) - 1;

  // Initial Spills
  () = #spill(root, pub_seed, sk_seed, tree_addr, sig, wots_sign_leaf, wots_steps, leaf_addr, pk_addr);
  s_leaf_idx = leaf_idx;
  
  // for (idx = 0;; idx++)
  s_idx = 0;
  s_exit_outer_loop = 0;
  while(s_exit_outer_loop == 0) {
    // gen_leaf( &current[SPX_N], ctx, idx + idx_offset, info);
    () = #unspill(sig, pub_seed, sk_seed, wots_sign_leaf, wots_steps, leaf_addr, pk_addr);
    current_1 = current[SPX_N:SPX_N];
    temp = s_idx; // temp =  idx + idx_offset
    current[SPX_N:SPX_N], sig, leaf_addr, pk_addr = _wots_gen_leafx1(current_1, pub_seed, sk_seed, 
                                                                          temp, sig, wots_sign_leaf, 
                                                                          wots_steps, leaf_addr, pk_addr);
    () = #spill(sig, leaf_addr, pk_addr);

    // uint32_t internal_idx_offset = idx_offset;
    // uint32_t internal_idx = idx;
    // uint32_t internal_leaf = leaf_idx;

    temp = s_idx; s_internal_idx = temp;
    temp = s_leaf_idx; s_internal_leaf = temp;

    // for (h=0;; h++, internal_idx >>= 1, internal_leaf >>= 1)
    s_h = 0;
    s_h_spx_n = 0;
    s_exit_inner_loop = 0;
    while(s_exit_inner_loop == 0) {
      // if (h == tree_height) { memcpy( root, &current[SPX_N], SPX_N ); return; }
      if(s_h == SPX_TREE_HEIGHT) {
        () = #unspill(root);
        root = #copy(current[SPX_N : SPX_N]);

        () = #spill(root);
        s_exit_inner_loop = 1;
        s_exit_outer_loop = 1;
      } else {
        // if ((internal_idx ^ internal_leaf) == 0x01)
        // { memcpy( &auth_path[ h * SPX_N ], &current[SPX_N], SPX_N ); }
        temp = s_internal_idx;
        temp ^= s_internal_leaf;
        if(temp == 1) {
          () = #unspill(sig);
          out_offset = s_h_spx_n;
          current_1 = current[SPX_N : SPX_N];
          sig[SPX_WOTS_BYTES : SPX_TREE_HEIGHT * SPX_N] = 
            std::_x_memcpy_u8u8<SPX_TREE_HEIGHT * SPX_N, SPX_N>(sig[SPX_WOTS_BYTES : SPX_TREE_HEIGHT * SPX_N], out_offset, current_1);
          () = #spill(sig);
        }
        
        // if ((internal_idx & 1) == 0 && idx < max_idx) { break; }
        temp = s_internal_idx; temp &= 1;
        zero = 0;
        idx = s_idx;
        r_max_idx = max_idx; // add inline int to conditions library to avoid this
        cond = std::cond::cond_u32_a_eq_b_and_c_below_d(temp, zero, idx, r_max_idx);

        if(cond) {
          s_exit_inner_loop = 1;
        } else {
          // internal_idx_offset >>= 1;
          // set_tree_height(tree_addr, h + 1);
          // set_tree_index(tree_addr, internal_idx/2 + internal_idx_offset );

          () = #unspill(tree_addr);
          temp = s_h; temp += 1;
          tree_addr = __set_tree_height(tree_addr, temp);

          temp = s_internal_idx; temp >>= 1;
          tree_addr = __set_tree_index(tree_addr, temp);
          () = #spill(tree_addr);      

          // unsigned char *left = &stack[h * SPX_N];
          // memcpy( &current[0], left, SPX_N );
          current_0 = current[0:SPX_N];
          out_offset = 0;
          nodes_p = nodes;
          in_offset = s_h_spx_n;
          bytes = SPX_N;

          current[0:SPX_N] =
              std::_x_memcpy_u8u8_2<SPX_N,SPX_TREE_HEIGHT*SPX_N>(current_0, out_offset, nodes_p, in_offset, bytes);

          // thash( &current[1 * SPX_N], &current[0 * SPX_N], 2, ctx, tree_addr);
          current_1 = current[SPX_N:SPX_N];
          current_p = current;
          () = #unspill(pub_seed, tree_addr);
          current[SPX_N:SPX_N] = __thash<2>(current_1, current_p, pub_seed, tree_addr);
        }
      }

      if(s_exit_inner_loop == 0) {
        s_h += 1;
        s_h_spx_n += SPX_N;
        s_internal_idx >>= 1;
        s_internal_leaf >>= 1;
      }
    } // end: C: for (h=0;; h++, internal_idx >>= 1, internal_leaf >>= 1)
      // Jasmin: while(s_exit_inner_loop == 0)

    // memcpy( &stack[h * SPX_N], &current[SPX_N], SPX_N);
    if(s_exit_outer_loop == 0) {
      // no need to memcpy if s_exit_outer_loop == 1
      nodes_p = nodes;
      out_offset = s_h_spx_n;
      current_1 = current[SPX_N:SPX_N];
      nodes = std::_x_memcpy_u8u8<SPX_TREE_HEIGHT*SPX_N,SPX_N>(nodes_p, out_offset, current_1);

      s_idx += 1;
    }

  }  // end: C: for (idx = 0;; idx++) 
     // Jasmin: while(s_exit_outer_loop == 0)

  () = #unspill(root, tree_addr, sig, leaf_addr, pk_addr);

  return root, tree_addr, sig, leaf_addr, pk_addr;
}
