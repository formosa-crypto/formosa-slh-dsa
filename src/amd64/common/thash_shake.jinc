from Sphincs require "fips202/shake256_array/shake256.jinc"

inline 
fn __thash_inplace(
  reg ptr u8[SPX_N] out, // INBLOCKS = 1
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] addr
) -> reg ptr u8[SPX_N]
{
  stack u8[SPX_N + SPX_ADDR_BYTES + SPX_N] buf;
  reg ptr u8[SPX_N + SPX_ADDR_BYTES + SPX_N] buf_p;

  buf[0 : SPX_N] = #copy(pub_seed);
  buf[SPX_N : SPX_ADDR_BYTES] = #copy(addr);
  buf[SPX_N + SPX_ADDR_BYTES : SPX_N] = #copy(out);
  
  buf_p = buf;
  out = shake256_SPX_N__2_SPX_N_p_SPX_ADDR_BYTES::__shake256(out, buf_p);
  
  out = out;

  return out;
}

fn _thash_inplace(
  reg ptr u8[SPX_N] out,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] addr
) -> reg ptr u8[SPX_N]
{
  out = __thash_inplace(out, pub_seed, addr);
  return out;
}

inline 
fn __thash_inplace_(
  reg ptr u8[SPX_N] out,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] addr
) -> reg ptr u8[SPX_N]
{
  out = out; 
  pub_seed = pub_seed; 
  addr = addr;
  
  out = _thash_inplace(out, pub_seed, addr);
  
  out = out;

  return out;
}

namespace thash_2 {
  param int INBLOCKS = 2;
  from Sphincs require "generic/__thash.jinc"
}

namespace thash_wots_len {
  param int INBLOCKS = SPX_WOTS_LEN;
  from Sphincs require "generic/__thash.jinc"
}