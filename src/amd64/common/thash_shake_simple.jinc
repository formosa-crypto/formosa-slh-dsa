inline 
fn __thash<INBLOCKS>(
  reg ptr u8[SPX_N] out,
  reg ptr u8[INBLOCKS * SPX_N] in,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] addr
) -> reg ptr u8[SPX_N]
{
  stack   u8[SPX_N + SPX_ADDR_BYTES + INBLOCKS * SPX_N] buf;
  reg ptr u8[SPX_N + SPX_ADDR_BYTES + INBLOCKS * SPX_N] buf_p;

  buf[0 : SPX_N] = #copy(pub_seed);
  buf[SPX_N : SPX_ADDR_BYTES] = #copy(addr);
  buf[SPX_N + SPX_ADDR_BYTES : INBLOCKS * SPX_N] = #copy(in);

  buf_p = buf;
  out = __shake256<SPX_N,SPX_N+SPX_ADDR_BYTES+INBLOCKS * SPX_N>(out, buf_p);

  out = out;

  return out;
}//<>

fn _thash<INBLOCKS>(
  reg ptr u8[SPX_N] out,
  reg ptr u8[INBLOCKS * SPX_N] in,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] addr
) -> reg ptr u8[SPX_N]
{
  out = __thash<INBLOCKS>(out, in, pub_seed, addr);
  return out;
}//<>

inline
fn __thash_<INBLOCKS>(
  reg ptr u8[SPX_N] out,
  reg ptr u8[INBLOCKS * SPX_N] in,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] addr
) -> reg ptr u8[SPX_N]
{
  out = out;
  in = in;
  pub_seed = pub_seed;
  addr = addr;

  out = _thash<INBLOCKS>(out, in, pub_seed, addr);

  out = out;

  return out;
}//<>

inline 
fn __thash_inplace(
  reg ptr u8[SPX_N] out, // INBLOCKS = 1
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] addr
  ) -> reg ptr u8[SPX_N]
{
  stack u8[SPX_N + SPX_ADDR_BYTES + SPX_N] buf;
  reg ptr u8[SPX_N + SPX_ADDR_BYTES + SPX_N] buf_p;

  buf[0 : SPX_N] = #copy(pub_seed);
  buf[SPX_N : SPX_ADDR_BYTES] = #copy(addr);
  buf[SPX_N + SPX_ADDR_BYTES : SPX_N] = #copy(out);
  
  buf_p = buf;
  out = __shake256<SPX_N,SPX_N+SPX_ADDR_BYTES+SPX_N>(out, buf_p);
  
  out = out;

  return out;
}//<>

fn _thash_inplace(
  reg ptr u8[SPX_N] out,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] addr
) -> reg ptr u8[SPX_N]
{
  out = __thash_inplace(out, pub_seed, addr);
  return out;
}//<>

inline 
fn __thash_inplace_(
  reg ptr u8[SPX_N] out,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] addr
) -> reg ptr u8[SPX_N]
{
  out = out; 
  pub_seed = pub_seed; 
  addr = addr;
  
  out = _thash_inplace(out, pub_seed, addr);
  
  out = out;

  return out;
}//<>
