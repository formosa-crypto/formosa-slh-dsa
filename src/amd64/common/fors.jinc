/*
 * This file only contains the WOTS+ code that is common to the reference and the AVX-2 implementation
 * See the ref/ and avx2/ directories for the rest of the code
 */
inline 
fn __fors_sk_to_leaf(
  reg ptr u8[SPX_N] leaf,
  reg ptr u8[SPX_N] sk, // INBLOCKS = 1 so SPX_N * INBLOCKS = SPX_N
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  leaf = __thash_<1>(leaf, sk, pub_seed, fors_leaf_addr);
  return leaf;
}

fn _fors_sk_to_leaf(
  reg ptr u8[SPX_N] leaf,
  reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  leaf = __fors_sk_to_leaf(leaf, sk, pub_seed, fors_leaf_addr);
  return leaf;
}

inline 
fn __fors_sk_to_leaf_(
  reg ptr u8[SPX_N] leaf,
  reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  leaf = leaf; leaf = leaf; sk = sk; pub_seed = pub_seed; fors_leaf_addr = fors_leaf_addr;
  leaf = _fors_sk_to_leaf(leaf, sk, pub_seed, fors_leaf_addr);
  leaf = leaf;
  return leaf;
}

fn _fors_gen_sk(
  reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  sk = __prf_addr(sk, pub_seed, sk_seed, fors_leaf_addr);
  return sk;
}

inline 
fn __fors_gen_sk_(
  reg ptr u8[SPX_N] sk,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u8[SPX_N] sk_seed,
  reg ptr u32[8] fors_leaf_addr
) -> reg ptr u8[SPX_N]
{
  sk = sk;
  pub_seed = pub_seed;
  sk_seed = sk_seed;
  fors_leaf_addr = fors_leaf_addr;

  sk = _fors_gen_sk(sk, pub_seed, sk_seed, fors_leaf_addr);

  sk = sk;

  return sk;
}

inline 
fn __message_to_indices<MSG_LEN>(
  reg ptr u32[SPX_FORS_TREES] indices,
  reg ptr u8[MSG_LEN] m // Assumes m contains at least SPX_FORS_HEIGHT * SPX_FORS_TREES bits.
) -> reg ptr u32[SPX_FORS_TREES]
{
    reg u64 i j;

  reg u64 offset zero;
  reg u64 t u z v;

  ?{}, zero = #set0();
  offset = 0;

  ?{}, i = #set0();
  while (i < SPX_FORS_TREES)
  {
    indices[i] = zero;

    ?{}, j = #set0();
    while (j < SPX_FORS_HEIGHT)
    {
      t = offset; t >>= 3 & 63;

      u = offset;
      u &= 0x7;

      z = (64u) m[t];
      z >>= u & 63;

      z &= 0x1;
      j = j;        // register allocation
      z <<= j & 63;
      j = j;        // allocation

      indices[i] ^= z;
      offset += 1;

      j += 1;
    }

    i += 1;
  }
  return indices;
}//<>

inline 
fn __fors_pk_from_sig(
  reg ptr u8[SPX_N] pk, // root
  reg uptr sig_ptr,
  reg ptr u8[SPX_FORS_MSG_BYTES] msg,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_addr
) -> reg ptr u8[SPX_N]
{
  stack u32[SPX_FORS_TREES] indices;
  reg ptr u32[SPX_FORS_TREES] indices_p;

  stack u32[8] fors_tree_addr fors_pk_addr;

  stack u8[SPX_FORS_TREES * SPX_N] roots;
  reg ptr u8[SPX_FORS_TREES * SPX_N] roots_p;

  stack u8[SPX_N] leaf buf buf;
  reg ptr u8[SPX_N] leaf_p;

  inline int i;
  inline u32 idx_offset;
  reg u32 t;
  
  () = #spill(sig_ptr, pk, pub_seed, msg);

  fors_pk_addr = __zero_address(fors_tree_addr);
  fors_tree_addr = __zero_address(fors_tree_addr);

  // copy_keypair_addr(fors_tree_addr, fors_addr);
  fors_tree_addr = __copy_keypair_addr(fors_tree_addr, fors_addr);

  // copy_keypair_addr(fors_pk_addr, fors_addr);
  fors_pk_addr = __copy_keypair_addr(fors_pk_addr, fors_addr);

  // set_type(fors_tree_addr, SPX_ADDR_TYPE_FORSTREE);
  fors_tree_addr = __set_type(fors_tree_addr, SPX_ADDR_TYPE_FORSTREE);

  // set_type(fors_pk_addr, SPX_ADDR_TYPE_FORSPK);
  fors_pk_addr = __set_type(fors_pk_addr, SPX_ADDR_TYPE_FORSPK);

  // message_to_indices(indices, m);
  () = #unspill(msg);
  indices = __message_to_indices<SPX_FORS_MSG_BYTES>(indices, msg);

  for i=0 to SPX_FORS_TREES {
    // idx_offset = i * (1 << SPX_FORS_HEIGHT);
    idx_offset = (1 << SPX_FORS_HEIGHT) * i;

    // set_tree_height(fors_tree_addr, 0);
    fors_tree_addr = __set_tree_height(fors_tree_addr, 0);

    // set_tree_index(fors_tree_addr, indices[i] + idx_offset);
    t = indices[i]; t += idx_offset;
    fors_tree_addr = __set_tree_index(fors_tree_addr, t);

    // fors_sk_to_leaf(leaf, sig_ptr, ctx, fors_tree_addr);
    () = #unspill(sig_ptr, pub_seed);
    buf = __load_nbytes(buf, sig_ptr);
    leaf_p = leaf;
    leaf_p = __fors_sk_to_leaf_(leaf_p, buf, pub_seed, fors_tree_addr);
    leaf = leaf_p;

    // sig += SPX_N;
    () = #unspill(sig_ptr);
    sig_ptr += SPX_N;
    () = #spill(sig_ptr);

    // compute_root(roots + i*SPX_N, leaf, indices[i], idx_offset, sig, SPX_FORS_HEIGHT, ctx, fors_tree_addr);
    () = #unspill(sig_ptr, pub_seed);
    t = indices[i];
    leaf_p = leaf;
    roots[i * SPX_N : SPX_N], fors_tree_addr = 
      __compute_root(roots[i * SPX_N : SPX_N], leaf_p, t, idx_offset, sig_ptr, SPX_FORS_HEIGHT, pub_seed, fors_tree_addr);

    () = #unspill(sig_ptr);
    sig_ptr += SPX_N * SPX_FORS_HEIGHT;
    () = #spill(sig_ptr);
  }

  () = #unspill(pk, pub_seed);
  roots_p = roots;
  pk = __thash<SPX_FORS_TREES>(pk, roots_p, pub_seed, fors_pk_addr);

  return pk;
}


fn _fors_pk_from_sig(
  reg ptr u8[SPX_N] pk, // root
  reg uptr sig,
  reg ptr u8[SPX_FORS_MSG_BYTES] msg,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_addr
) -> reg ptr u8[SPX_N]
{
  pk = __fors_pk_from_sig(pk, sig, msg, pub_seed, fors_addr);
  return pk;
}

inline 
fn __fors_pk_from_sig_(
  reg ptr u8[SPX_N] pk, // root
  reg uptr sig,
  reg ptr u8[SPX_FORS_MSG_BYTES] msg,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] fors_addr
) -> reg ptr u8[SPX_N]
{
  pk = pk; sig = sig; msg = msg; pub_seed = pub_seed; fors_addr = fors_addr;

  pk = _fors_pk_from_sig(pk, sig, msg, pub_seed, fors_addr);

  pk = pk;
  return pk;
}
