namespace shake256_thash {
    param int OUTLEN = SPX_N;
    param int INLEN  = SPX_N + SPX_ADDR_BYTES + INBLOCKS * SPX_N;
    from Sphincs require "fips202/shake256_array/__shake256.jinc"
}

inline 
fn __thash(
  reg ptr u8[SPX_N] out,
  reg ptr u8[INBLOCKS * SPX_N] in,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] addr
) -> reg ptr u8[SPX_N]
{
  stack   u8[SPX_N + SPX_ADDR_BYTES + INBLOCKS * SPX_N] buf;
  reg ptr u8[SPX_N + SPX_ADDR_BYTES + INBLOCKS * SPX_N] buf_p;

  buf[0 : SPX_N] = #copy(pub_seed);
  buf[SPX_N : SPX_ADDR_BYTES] = #copy(addr);
  buf[SPX_N + SPX_ADDR_BYTES : INBLOCKS * SPX_N] = #copy(in);

  buf_p = buf;
  out = shake256_thash::__shake256(out, buf_p);

  out = out;

  return out;
}

fn _thash(
  reg ptr u8[SPX_N] out,
  reg ptr u8[INBLOCKS * SPX_N] in,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] addr
) -> reg ptr u8[SPX_N]
{
  out = __thash(out, in, pub_seed, addr);
  return out;
}

inline
fn __thash_(
  reg ptr u8[SPX_N] out,
  reg ptr u8[INBLOCKS * SPX_N] in,
  reg ptr u8[SPX_N] pub_seed,
  reg ptr u32[8] addr
) -> reg ptr u8[SPX_N]
{
  out = out;
  in = in;
  pub_seed = pub_seed;
  addr = addr;

  out = _thash(out, in, pub_seed, addr);

  out = out;

  return out;
}
