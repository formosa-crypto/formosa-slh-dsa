/*
 * This file only contains the WOTS+ code that is common to the reference and the AVX-2 implementation
 * See the ref/ and avx2/ directories for the rest of the code
 */

from Sphincs require "types.jinc"
from Stdlib require "stdlib.jinc"

namespace basew_checksum {
  param int OUTLEN = SPX_WOTS_LEN2;
  param int INLEN = (SPX_WOTS_LEN2 * SPX_WOTS_LOGW + 7) / 8;
  
  from Sphincs require "generic/__base_w.jinc"
}

namespace basew_chain_lengths {
  param int OUTLEN = SPX_WOTS_LEN;
  param int INLEN = SPX_N;
  
  from Sphincs require "generic/__base_w.jinc"
}

inline 
fn __wots_checksum(
  reg ptr u32[SPX_WOTS_LEN2] csum_base_w,
  reg ptr u32[SPX_WOTS_LEN] msg_base_w
) -> reg ptr u32[SPX_WOTS_LEN2]
{
  stack u8[(SPX_WOTS_LEN2 * SPX_WOTS_LOGW + 7) / 8] csum_bytes;
  reg ptr u8[(SPX_WOTS_LEN2 * SPX_WOTS_LOGW + 7) / 8] csum_bytes_p;

  reg u64 i = 0;
  reg u64 csum = 0;
  reg u64 t u;

  inline int k;
 
  while (i < SPX_WOTS_LEN1) {
    t = SPX_WOTS_W - 1;
    u = (64u) msg_base_w[i];
    t -= u;
    csum += t;
    i += 1;
  }

  k = (SPX_WOTS_LEN2 * SPX_WOTS_LOGW) % 8;
  u = 8;
  u -= k;
  t = 0x7;
  ?{}, u = #AND(u, t); // NOTE: u %= 8 is the same as u &= 7. 
                       // It is basically isolating the three least significant bits

  u = u;
  ?{}, csum = #SHL(csum, u);

  csum_bytes_p = csum_bytes;
  csum_bytes_p = std::bytes::Wchecksum::u64_to_bytes(csum_bytes_p, csum);

  csum_base_w = basew_checksum::__base_w(csum_base_w, csum_bytes_p);

  return csum_base_w;
}

inline 
fn __chain_lengths(
  reg ptr u32[SPX_WOTS_LEN] lengths,
  reg ptr u8[SPX_N] msg
) -> reg ptr u32[SPX_WOTS_LEN]
{
  reg ptr u32[SPX_WOTS_LEN2] t;
  
  lengths = basew_chain_lengths::__base_w(lengths, msg);

  t = lengths[SPX_WOTS_LEN1 : SPX_WOTS_LEN2];
  t = __wots_checksum(t, lengths);
  lengths[SPX_WOTS_LEN1 : SPX_WOTS_LEN2] = t;

  return lengths;
}

fn _chain_lengths(
  reg ptr u32[SPX_WOTS_LEN] lengths,
  reg ptr u8[SPX_N] msg
) -> reg ptr u32[SPX_WOTS_LEN]
{
  lengths = __chain_lengths(lengths, msg);
  return lengths;
}

inline 
fn __chain_lengths_(
  reg ptr u32[SPX_WOTS_LEN] lengths,
  reg ptr u8[SPX_N] msg
) -> reg ptr u32[SPX_WOTS_LEN]
{
  lengths = lengths; msg = msg;
  lengths = _chain_lengths(lengths, msg);
  lengths = lengths;
  return lengths;
}
